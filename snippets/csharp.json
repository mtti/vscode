/*
Copyright 2017 mtti

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

{
	"Optimized for loop": {
		"prefix": "for",
		"body": [
            "for (int i = 0, count = ${1:count}; i < count; i++)",
            "{",
			"    $0",
			"}"
		]
	},

	"Iterate through listeners": {
		"prefix": "forlist",
		"body": [
            "for (int i = 0, count = _listeners.Count; i < count; i++)",
            "{",
			"    _listeners[i].${2:methodName}($3);",
			"}"
		],
		"description": "Call a method on all listeners"
	},

	"New MonoBehaviour": {
		"prefix": "monobehaviour",
		"body": [
			"using System;",
			"using UnityEngine;",
			"",
            "namespace ${1:namespace}",
            "{",
            "    public class ${TM_FILENAME/(.*)\\..+$/$1/}$2 : MonoBehaviour",
            "    {",
			"        $0",
			"    }",
			"}",
			""
		],
		"description": "Define a new MonoBehaviour"
	},

	"Custom editor": {
		"prefix": "editor",
		"body": [
			"using System;",
            "using UnityEngine;",
            "using UnityEditor;",
            "",
            "namespace ${1:namespace}",
            "{",
            "    [CustomEditor(typeof(${TM_FILENAME/(.*)Editor\\..+$/$1/}$2))]",
            "    public class ${TM_FILENAME/(.*)Editor\\..+$/$1/}$2Editor : UnityEditor.Editor",
            "    {",
            "        private ${TM_FILENAME/(.*)Editor\\..+$/$1/}$2 _target;",
            "",
            "        public override void OnInspectorGUI()",
            "        {",
            "            DrawDefaultInspector();",
            "            EditorGUILayout.Separator();",
            "",
            "            $0",
            "        }",
            "",
            "        private void OnEnable()",
            "        {",
            "            _target = (${TM_FILENAME/(.*)Editor\\..+$/$1/}$2)target;",
            "        }",
			"    }",
			"}",
			""
		],
		"description": "Define a new custom editor"
	},

    "Button": {
        "prefix": "button",
        "body": [
            "if (GUILayout.Button(\"$1\"))",
            "{",
            "    $0",
            "}"
        ],
        "description": "Add inspector button"
    },

	"ScriptableObject": {
		"prefix": "scriptableobject",
		"body": [
			"using System;",
			"using UnityEngine;",
			"",
            "namespace ${1:namespace}",
            "{",
            "    [CreateAssetMenu(menuName = \"${TM_FILENAME/(.*)\\..+$/$1/}$2\")]",
            "    public class ${TM_FILENAME/(.*)\\..+$/$1/}$2 : ScriptableObject",
            "    {",
			"        $0",
			"    }",
			"}",
			""
		],
		"description": "Define a new ScriptableObject"
  },

	"New IComponentData": {
		"prefix": "componentdata",
		"body": [
			"using Unity.Entities;",
			"",
            "namespace ${1:namespace}",
            "{",
            "    public class ${TM_FILENAME/(.*)\\..+$/$1/}$2 : IComponentData",
            "    {",
			"        $0",
			"    }",
			"}",
			""
		],
		"description": "Define a new IComponentData implementation"
  },

	"New JobComponentSystem": {
		"prefix": "jobcomponentsystem",
		"body": [
			"using Unity.Entities;",
      "using Unity.Jobs;",
      "//using Unity.Mathematics;",
      "//using Unity.Physics;",
      "//using Unity.Transforms;",
      "",
      "namespace ${1:namespace}",
      "{",
      "    [AlwaysSynchronizeSystem]",
      "    public class ${TM_FILENAME/(.*)\\..+$/$1/}$2 : JobComponentSystem",
      "    {",
      "        protected override JobHandle OnUpdate(JobHandle inputDeps)",
      "        {",
      "            Entities.ForEach(() =>",
      "            {",
      "                $0",
      "            }).Run();",
      "",
      "            return default;",
      "        }",
      "    }",
			"}",
			""
		],
		"description": "Define a new IComponentData implementation"
	}
}
