/*
Copyright 2017 mtti

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

{
	"Optimized for loop": {
		"prefix": "for",
		"body": [
            "for (int i = 0, count = ${1:count}; i < count; i++)",
            "{",
			"    $0",
			"}"
		]
	},

	"Iterate through listeners": {
		"prefix": "forlist",
		"body": [
            "for (int i = 0, count = this.listeners.Count; i < count; i++)",
            "{",
			"    this.listeners[i].${2:methodName}($3);",
			"}"
		],
		"description": "Call a method on all listeners"
	},

	"New MonoBehaviour": {
		"prefix": "monobehaviour",
		"body": [
			"using System;",
			"using UnityEngine;",
			"",
            "namespace ${1:namespace}",
            "{",
            "    public class ${TM_FILENAME/(.*)\\..+$/$1/}$2 : MonoBehaviour",
            "    {",
			"        $0",
			"    }",
			"}",
			""
		],
		"description": "Define a new MonoBehaviour"
	},

    "derp": {
        "prefix": "derp",
        "body": "${TM_FILENAME/(.*)Editor\\..+$/$1/}"
    },

	"Custom editor": {
		"prefix": "editor",
		"body": [
			"using System;",
            "using UnityEngine;",
            "using UnityEditor;",
            "",
            "namespace ${1:namespace}",
            "{",
            "    [CustomEditor(typeof(${TM_FILENAME/(.*)Editor\\..+$/$1/}$2))]",
            "    public class ${TM_FILENAME/(.*)Editor\\..+$/$1/}$2Editor : UnityEditor.Editor",
            "    {",
            "        ${TM_FILENAME/(.*)Editor\\..+$/$1/}$2 component;",
            "",
            "        public override void OnInspectorGUI()",
            "        {",
            "            DrawDefaultInspector();",
            "            EditorGUILayout.Separator();",
            "",
            "            $0",
            "        }",
            "",
            "        private void OnEnable()",
            "        {",
            "            this.component = (${TM_FILENAME/(.*)Editor\\..+$/$1/}$2)target;",
            "        }",
			"    }",
			"}",
			""
		],
		"description": "Define a new MonoBehaviour"
	},

    "Button": {
        "prefix": "button",
        "body": [
            "if (GUILayout.Button(\"$1\"))",
            "{",
            "    $0",
            "}"
        ],
        "description": "Add inspector button"
    },

	"Inject property": {
		"prefix": "inprop",
		"body": [
            "[Inject]",
            "I${1:ServiceName} ${2:propertyName};"
		],
		"description": "Inject property"
	},

	"Service": {
		"prefix": "service",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"",
			"using mtti.Inject;",
			"",
            "namespace ${1:namespace}",
            "{",
            "    public interface I${2:ServiceName}Listener { }",
			"",
            "    public interface I${2:ServiceName}Service",
            "    {",
			"        void AddListener(I${2:ServiceName}Listener listener);",
			"        void RemoveListener(I${2:ServiceName}Listener listener);",
			"    }",
			"",
			"    [Service(typeof(I${2:ServiceName}Service))]",
			"    public class ${2:ServiceName}Service : I${2:ServiceName}Service",
            "    {",
            "        private List<I${2:ServiceName}Listener> listeners",
			"            = new List<I${2:ServiceName}Listener>();",
			"",
            "        public void AddListener(I${2:ServiceName}Listener listener)",
            "        {",
			"            if (!this.listeners.Contains(listener))",
            "            {",
            "                this.listeners.Add(listener);",
			"            }",
			"        }",
			"",
            "        public void RemoveListener(I${2:ServiceName}Listener listener)",
            "        {",
			"            this.listeners.Remove(listener);",
			"        }",
			"    }",
            "}$0",
            ""
		],
		"description": "Define a new mtti.Inject service"
	},

	"ScriptableObject": {
		"prefix": "scriptableobject",
		"body": [
			"using System;",
			"using UnityEngine;",
			"",
            "namespace ${1:namespace}",
            "{",
            "    public class ${TM_FILENAME/(.*)\\..+$/$1/}$2 : ScriptableObject",
            "    {",
			"        $0",
			"    }",
			"}",
			""
		],
		"description": "Define a new ScriptableObject"
	}
}
